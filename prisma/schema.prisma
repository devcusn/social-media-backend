// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  username         String
  email            String          @unique
  password         String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  profile          Profile?
  posts            Post[]
  friendRequest    FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id        Int       @id @default(autoincrement())
  bio       String?
  avatarUrl String?
  date      DateTime?
  user      User      @relation(fields: [userId], references: [id])
  userId    Int       @unique
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FriendRequest {
  id         Int           @id @default(autoincrement())
  sender     User          @relation("SentRequests", fields: [senderId], references: [id])
  senderId   Int
  receiver   User          @relation("ReceivedRequests", fields: [receiverId], references: [id])
  receiverId Int
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now())

  @@unique([senderId, receiverId])
}
